/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.farhan;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class MarketForm extends javax.swing.JFrame {

    
    private DefaultTableModel model;
    private DefaultTableModel model2;
    
    public MarketForm() {
        initComponents();

        model = new DefaultTableModel();
        model2 = new DefaultTableModel();

        TableMerchant.setModel(model);        
        model.addColumn("id");
        model.addColumn("name");
        model.addColumn("email");
        model.addColumn("balance");
        
        TableProduct.setModel(model2);
        model2.addColumn("id");
        model2.addColumn("name");
        model2.addColumn("price");
        model2.addColumn("merchant id");

        loadDataMerchant();
        loadDataProduct();
    }
    
    public void loadDataMerchant() {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();

        try {
            Connection c = ConnectionUtil.getConnection();
            Statement s = c.createStatement();
            String sql = "SELECT * FROM tb_merchant_farhan";
            ResultSet r = s.executeQuery(sql);
            while (r.next()) {
                // lakukan penulusuran baris
                Object[] o = new Object[7];
                o[0] = r.getString("id");
                o[1] = r.getString("name");
                o[2] = r.getString("email");
                o[3] = r.getBigDecimal("balance");
                model.addRow(o);
            }

            r.close();
            s.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void loadDataProduct() {
        model2.getDataVector().removeAllElements();
        model2.fireTableDataChanged();

        try {
            Connection c = ConnectionUtil.getConnection();
            Statement s = c.createStatement();
            String sql = "SELECT * FROM tb_product_farhan";
            ResultSet r = s.executeQuery(sql);
            while (r.next()) {
                // lakukan penulusuran baris
                Object[] o = new Object[5];
                o[0] = r.getString("id");
                o[1] = r.getString("name");
                o[2] = r.getInt("price");
                o[3] = r.getBigDecimal("merchant_id");
                model2.addRow(o);
            }

            r.close();
            s.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sell = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BHome = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableProduct = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        inputName = new javax.swing.JTextField();
        inputEmail = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableMerchant = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        inputNameProduct = new javax.swing.JTextField();
        inputPriceProduct = new javax.swing.JTextField();
        inputMerchantId = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        BHome1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        inputBalance = new javax.swing.JTextField();
        buy = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        sell.setText("SELL");
        sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("PRODUCT");

        BHome.setText("HOME");
        BHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BHomeActionPerformed(evt);
            }
        });

        TableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Price", "Merchant ID"
            }
        ));
        TableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableProductMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableProduct);
        if (TableProduct.getColumnModel().getColumnCount() > 0) {
            TableProduct.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Email");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Name");

        inputName.setEditable(false);
        inputName.setForeground(new java.awt.Color(0, 153, 0));

        inputEmail.setEditable(false);
        inputEmail.setForeground(new java.awt.Color(0, 153, 0));

        TableMerchant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Email", "Balance"
            }
        ));
        TableMerchant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMerchantMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableMerchant);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("MERCHANT");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setText("MARKET");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Name");

        inputNameProduct.setEditable(false);
        inputNameProduct.setForeground(new java.awt.Color(153, 0, 0));

        inputPriceProduct.setEditable(false);
        inputPriceProduct.setForeground(new java.awt.Color(153, 0, 0));

        inputMerchantId.setEditable(false);
        inputMerchantId.setForeground(new java.awt.Color(153, 0, 0));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("Price");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("Merchant ID");

        BHome1.setText("REFRESH");
        BHome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BHome1ActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("Balance");

        inputBalance.setEditable(false);
        inputBalance.setForeground(new java.awt.Color(0, 153, 0));

        buy.setText("BUY");
        buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(sell, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buy, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(410, 410, 410)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BHome1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(44, 44, 44)
                                .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel11))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inputEmail)
                                    .addComponent(inputBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 346, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16)
                            .addComponent(jLabel6))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(44, 44, 44)
                                    .addComponent(inputNameProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inputPriceProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(inputMerchantId, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BHome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BHome1)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(inputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18)
                        .addGap(91, 91, 91)
                        .addComponent(sell)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(buy)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(inputNameProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(inputBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputPriceProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(inputMerchantId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellActionPerformed

        int i = TableMerchant.getSelectedRow();
        if (i == -1) {
            // tidak ada baris yang tedeteksi
            return;
        }

        // ambil field balance dari merchant
        String nameInput = inputName.getText();
        String emailInput = inputEmail.getText();
        BigDecimal balance = new BigDecimal(inputBalance.getText());

        // ambil field price dari product
        String title = inputNameProduct.getText();
        BigDecimal price = new BigDecimal(inputPriceProduct.getText());
        int merchant_id = Integer.parseInt(inputMerchantId.getText());
                
            BigDecimal addBalance = balance.add(price); // aritmatika penjumlahan
            inputBalance.setText(addBalance.toString());
            try {

                String name = model.getValueAt(i, 1).toString();

                nameInput = inputName.getText();
                emailInput = inputEmail.getText();
                balance = new BigDecimal(inputBalance.getText());
                
                Connection c = ConnectionUtil.getConnection();

                String sql = "UPDATE tb_merchant_farhan SET name = ?, email = ?, balance = ? where name = ?";
                PreparedStatement p = c.prepareStatement(sql);
                p.setString(1, nameInput);
                p.setString(2, emailInput);
                p.setBigDecimal(3, balance);
                p.setString(4, name);

                p.executeUpdate();
                p.close();

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    Connection c = ConnectionUtil.getConnection();
                    String sql = "INSERT INTO tb_transaction_farhan(email,product_name,status) VALUES (?,?,?)";
                    PreparedStatement p = c.prepareStatement(sql);
                    
                    p.setString(1, emailInput);
                    p.setString(2, title);
                    p.setString(3, "SELL");
                    
                    p.executeUpdate();
                    p.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    System.out.println("terjadi error pada saat insert data");
                } finally {
                    loadDataMerchant();
                    loadDataProduct();
                }
                
                loadDataMerchant();
                loadDataProduct();
            }
    }//GEN-LAST:event_sellActionPerformed

    private void BHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BHomeActionPerformed
        new MainForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BHomeActionPerformed

    private void TableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableProductMouseClicked
        int i = TableProduct.getSelectedRow();
        if (i == -1) {
            // tidak ada baris yang tedeteksi
            return;
        }

        String title = model2.getValueAt(i, 1).toString();
        inputNameProduct.setText(title);

        String price = model2.getValueAt(i, 2).toString();
        inputPriceProduct.setText(price);

        String merchantId = model2.getValueAt(i, 3).toString();
        inputMerchantId.setText(merchantId);
        
    }//GEN-LAST:event_TableProductMouseClicked

    private void TableMerchantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMerchantMouseClicked

        int i = TableMerchant.getSelectedRow();
        if (i == -1) {
            // tidak ada baris yang tedeteksi
            return;
        }

        String name = model.getValueAt(i, 1).toString();
        inputName.setText(name);

        String email = (String) model.getValueAt(i, 2).toString();
        inputEmail.setText(email);
        
        String balance =  model.getValueAt(i, 3).toString();
        inputBalance.setText(balance);        
    }//GEN-LAST:event_TableMerchantMouseClicked

    private void BHome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BHome1ActionPerformed
        MarketForm af = new MarketForm();
        af.setResizable(false);
        af.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        af.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BHome1ActionPerformed

    private void buyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyActionPerformed

        int i = TableMerchant.getSelectedRow();
        if (i == -1) {
            // tidak ada baris yang tedeteksi
            return;
        }
        // ambil field balance dari merchant
        String nameInput = inputName.getText();
        String emailInput = inputEmail.getText();
        BigDecimal balance = new BigDecimal(inputBalance.getText());

        // ambil field price dari product
        String title = inputNameProduct.getText();
        BigDecimal price = new BigDecimal(inputPriceProduct.getText());
        int merchant_id = Integer.parseInt(inputMerchantId.getText());

        if (balance.compareTo(price) == -1) {
            JOptionPane.showMessageDialog(null, "SALDO ANDA TIDAK CUKUP");
        } else {
            BigDecimal substractBalance = balance.subtract(price); // aritmatika penguranngan
            inputBalance.setText(substractBalance.toString());
            try {

                String name = model.getValueAt(i, 1).toString();

                nameInput = inputName.getText();
                emailInput = inputEmail.getText();
                balance = new BigDecimal(inputBalance.getText());

                Connection c = ConnectionUtil.getConnection();

                String sql = "UPDATE tb_merchant_farhan SET name = ?, email = ?, balance = ? where name = ?";
                PreparedStatement p = c.prepareStatement(sql);
                p.setString(1, nameInput);
                p.setString(2, emailInput);
                p.setBigDecimal(3, balance);
                p.setString(4, name);

                p.executeUpdate();
                p.close();

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    Connection c = ConnectionUtil.getConnection();
                    String sql = "INSERT INTO tb_transaction_farhan(email,product_name,status) VALUES (?,?,?)";
                    PreparedStatement p = c.prepareStatement(sql);
                    
                    p.setString(1, emailInput);
                    p.setString(2, title);
                    p.setString(3, "BUY");
                    p.executeUpdate();
                    p.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    System.out.println("terjadi error pada saat insert data");
                } finally {
                    loadDataMerchant();
                    loadDataProduct();
                }
                
                loadDataMerchant();
                loadDataProduct();
            }
        }
    }//GEN-LAST:event_buyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarketForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarketForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarketForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarketForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MarketForm af = new MarketForm();
                af.setVisible(true);
                af.setResizable(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BHome;
    private javax.swing.JButton BHome1;
    public javax.swing.JTable TableMerchant;
    public javax.swing.JTable TableProduct;
    private javax.swing.JButton buy;
    private javax.swing.JTextField inputBalance;
    private javax.swing.JTextField inputEmail;
    private javax.swing.JTextField inputMerchantId;
    private javax.swing.JTextField inputName;
    private javax.swing.JTextField inputNameProduct;
    private javax.swing.JTextField inputPriceProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton sell;
    // End of variables declaration//GEN-END:variables
}
